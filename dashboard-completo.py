
import streamlit as st
import pandas as pd
import altair as alt

st.title("Dashboard de Manuten√ß√£o - An√°lise Consolidada (Debug)")

@st.cache_data
def carregar_dados():
    df = pd.read_excel("analise_manutencao_completa.xlsx", sheet_name="Consolidado")
    df.columns = df.columns.str.strip()
    df["Descri√ß√£o do Trabalho / Observa√ß√£o (Ordem de servi√ßo)"] = df["Descri√ß√£o do Trabalho / Observa√ß√£o (Ordem de servi√ßo)"].fillna("").str.lower()
    if "Local manuten√ß√£o" in df.columns:
        df["Origem"] = df["Local manuten√ß√£o"].str.upper().str.strip()
        df["Origem"] = df["Origem"].replace({
            "MANUTEN√á√ÉO CAMPO": "CAMPO",
            "MANUTEN√á√ÉO INTERNA": "INTERNA",
            "MANUTEN√á√ÉO TERCEIRO": "TERCEIRO"
        })
    else:
        df["Origem"] = "N√ÉO INFORMADO"
    if "Entrada" in df.columns:
        df["Entrada"] = pd.to_datetime(df["Entrada"], errors="coerce")
        df["Ano/Mes"] = df["Entrada"].dt.to_period("M")
    return df

def classificar_componente(texto):
    categorias = {
        "Suspens√£o": ["mola", "molas", "molejo", "estabilizador", "pneu", "freio"],
        "Motor": ["motor"],
        "Vazamento - Combust√≠vel": ["vazamento combust√≠vel", "vazamento de combust√≠vel", "vaz. combust√≠vel"],
        "Vazamento - Hidr√°ulico": ["vazamento hidr√°ulico", "vazamento de √≥leo hidr√°ulico", "hidr√°ulico"],
        "Vazamento - √ìleo": ["vazamento √≥leo", "vazamento de √≥leo", "vaz. √≥leo"],
        "Rodantes": ["rodante", "esteira", "roletes", "coroa", "roda motriz"],
        "El√©trica": ["el√©trica", "luz", "farol", "chicote", "bateria"],
        "Mangueira (Vazamento)": ["mangueira"],
        "R√°dio": ["radio", "r√°dio"],
        "Avaliar": ["avaliar", "verifica√ß√£o", "verificar"],
        "Falha Eletr√¥nica / Painel": ["painel", "computador", "tela", "falha", "eletr√¥nico", "sistema", "display", "luz espia", "injetor"],
        "Ar Condicionado": ["ar condicionado", "ac", "climatizador", "evaporador", "ventilador", "condensador", "compressor do ar"],
        "Elevador": ["elevador", "elevat√≥ria", "plataforma"],
        "Acumulador": ["acumulador"],
        "Despontador": ["despontador"]
    }
    for categoria, palavras in categorias.items():
        if any(p in texto for p in palavras):
            return categoria
    return "N√£o Classificado"

df = carregar_dados()
df["Componente Detectado"] = df["Descri√ß√£o do Trabalho / Observa√ß√£o (Ordem de servi√ßo)"].apply(classificar_componente)

# DEBUG: Visualizar os dados filtrados de 18 de mar√ßo em diante
st.subheader("üìä DEBUG - Dados a partir de 18/03/2025")
st.write(df[df["Entrada"] >= pd.to_datetime("2025-03-18")])

# Incluir o gr√°fico de tempo de perman√™ncia a partir de 18/03/2025
st.subheader("Top 10 - Tempo de Perman√™ncia por Frota (a partir de 18/03/2025)")
df_periodo = df[df["Entrada"] >= pd.to_datetime("2025-03-18")]
df_periodo_tempo = df_periodo.groupby("N√∫mero de frota")["Tempo de Perman√™ncia(h)"].sum().reset_index()
df_periodo_tempo.columns = ["Frota", "Tempo (h)"]

if not df_periodo_tempo.empty:
    top1 = df_periodo_tempo.sort_values("Tempo (h)", ascending=False).iloc[0]["Frota"]
    df_periodo_tempo = df_periodo_tempo[df_periodo_tempo["Frota"] != top1]
    df_top10_periodo = df_periodo_tempo.sort_values("Tempo (h)", ascending=False).head(10)

    chart_top10_periodo = alt.Chart(df_top10_periodo).mark_bar(color="green").encode(
        x=alt.X("Frota:N", sort="-y"),
        y="Tempo (h):Q",
        tooltip=["Frota", "Tempo (h)"]
    ).properties(width=700, height=400)

    st.altair_chart(chart_top10_periodo, use_container_width=True)
else:
    st.warning("‚ö†Ô∏è Nenhum dado encontrado para o per√≠odo a partir de 18/03/2025.")
